<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes By Example</title>
    <link>https://tonejito.github.io/kbe/learning-paths/application-development/lesson-2/</link>
    <description>Recent content on Kubernetes By Example</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://tonejito.github.io/kbe/learning-paths/application-development/lesson-2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tonejito.github.io/kbe/learning-paths/application-development/lesson-2/managed-practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tonejito.github.io/kbe/learning-paths/application-development/lesson-2/managed-practice/</guid>
      <description>Guided Exercise: Deploying Managed Applications In this exercise you will deploy a managed containerized application in your Kubernetes cluster. You will observe how automatic deployment works and some of the High Availability features of Kubernetes.
Outcomes You should be able to:
 Deploy an application container with several replicas. Review the structure of the Deployment resource manifest. Update the application to a new version without losing availability.  Prerequisites You need a working Kubernetes cluster, and your kubectl command must be configured to communicate with the cluster.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tonejito.github.io/kbe/learning-paths/application-development/lesson-2/managed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tonejito.github.io/kbe/learning-paths/application-development/lesson-2/managed/</guid>
      <description>Deploying Managed Applications Objectives After completing this section, you should be able to use Kubernetes container management capabilities to deploy containerized applications in a declarative way.
Managing Containers One of the most significant features of Kubernetes is that it enables developers to use a declarative approach for automatic container life cycle management. Declarative approach means developers declare what should be the status of the application, and Kubernetes will update the containers to reach that state.</description>
    </item>
    
  </channel>
</rss>
